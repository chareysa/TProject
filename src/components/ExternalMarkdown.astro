---
import { marked } from "marked";
import { gfmHeadingId } from "marked-gfm-heading-id";
import { baseUrl } from "marked-base-url";
import { transform } from "ultrahtml";
import sanitize from "ultrahtml/transformers/sanitize";

const { src } = Astro.props;

let getMarkdownApiResponse;
if (src) {
  getMarkdownApiResponse = await fetch(src)
    .then((r) => {
      if (!r.ok) {
        return Promise.reject(r);
      }
      return r.text();
    })
    .catch((e) => {
      console.error("Error while fetching External Markdown from " + src, e);
    });
}



marked.use({
  gfm: true,
  smartypants: true,
});

marked.use(gfmHeadingId());
marked.use(baseUrl("https://example.com/folder/"));

const content = await marked.parse(getMarkdownApiResponse);

// @ts-expect-error
const sanitizedAndTransformed = await transform("<h1>Hello world!</h1><h5>BLA</h5>", [
  sanitize({ allowElements: ["h1", "h2", "h3", "h4"] }),
]);

console.log("Sanitized", sanitizedAndTransformed);
---

<Fragment set:html={content} />
